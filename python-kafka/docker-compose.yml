version: '2'
# Раздел, в котором будут описаны сервисы, начинается с 'services'.
services:
  # Нам нужно два сервиса.
  # Первый сервис (контейнер): zookeeper (хранит метаданные Кафка-кластера).
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # При использовании 'ports' применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    ports:
      - 22181:2181

  # Второй сервис (контейнер): kafka (это сам брокер).
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Нам нужно, чтобы сервис 'kafka' дождался бы готовности к работе сервиса 'zookeeper'.
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      #KAFKA_ADVERTISED_HOST_NAME: 192.168.1.9
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


#-----------------------Для проекта client-server--------------------------
# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

#services:

  # Как уже было сказано, мы собираемся создать клиентское и серверное приложения.
  # Это означает, что нам нужно два сервиса.
  # Первый сервис (контейнер): сервер.
  # Назвать его можно так, как нужно разработчику.
  # Понятное название сервиса помогает определить его роль.
  # Здесь мы, для именования соответствующего сервиса, используем ключевое слово 'server'.

#  server:
#
#    # Ключевое слово "build" позволяет задать
#    # путь к файлу Dockerfile, использующийся для создания образа,
#    # который позволит запустить сервис.
#    # Здесь 'server/' соответствует пути к папке сервера,
#    # которая содержит соответствующий Dockerfile.
#
#    build: server/
#
#    # Команда, которую нужно запустить после создания образа.
#    # Следующая команда означает запуск "python ./server.py".
#
#    command: python ./server.py
#
#    # Вспомните о том, что в качестве порта в 'server/server.py' указан порт 1234.
#    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
#    # мы должны организовать перенаправление этого порта на порт компьютера.
#    # Сделать это нам поможет ключевое слово 'ports'.
#    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
#    # В нашем случае нужно использовать порт компьютера 1234 и организовать его связь с портом
#    # 1234 контейнера (так как именно на этот порт сервер
#    # ожидает поступления запросов).
#
#    ports:
#      - 1234:1234
#
#  # Второй сервис (контейнер): клиент.
#  # Этот сервис назван 'client'.
#
#  client:
#    # Здесь 'client/ соответствует пути к папке, которая содержит
#    # файл Dockerfile для клиентской части системы.
#
#    build: client/
#
#    # Команда, которую нужно запустить после создания образа.
#    # Следующая команда означает запуск "python ./client.py".
#
#    command: python ./client.py
#
#    # Ключевое слово 'network_mode' используется для описания типа сети.
#    # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.
#
#    network_mode: host
#
#    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
#    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
#    # Нам нужно, чтобы сервис 'client' дождался бы готовности к работе сервиса 'server'.
#
#    depends_on:
#      - server